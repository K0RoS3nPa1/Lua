local PizzaHub = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/master/source.lua", true))()
local version = "1.0.0"

local Window = PizzaHub:CreateWindow({
	Name = "Pizza Hub", -- This Is Title Of Your Window
	Subtitle = version, -- A Gray Subtitle next To the main title.
	LogoID = nil, -- The Asset ID of your logo. Set to nil if you do not have a logo for Luna to use.
	LoadingEnabled = false, -- Whether to enable the loading animation. Set to false if you do not want the loading screen or have your own custom one.
	LoadingTitle = "", -- Header for loading screen
	LoadingSubtitle = "", -- Subtitle for loading screen

	ConfigSettings = {
		RootFolder = nil, -- The Root Folder Is Only If You Have A Hub With Multiple Game Scripts and u may remove it. DO NOT ADD A SLASH
		ConfigFolder = "Pizza hub" -- The Name Of The Folder Where Luna Will Store Configs For This Script. DO NOT ADD A SLASH
	},

	KeySystem = false, -- As Of Beta 6, Luna Has officially Implemented A Key System!
	KeySettings = {
		Title = "Luna Example Key",
		Subtitle = "Key System",
		Note = "Best Key System Ever! Also, Please Use A HWID Keysystem like Pelican, Luarmor etc. that provide key strings based on your HWID since putting a simple string is very easy to bypass",
		SaveInRoot = false, -- Enabling will save the key in your RootFolder (YOU MUST HAVE ONE BEFORE ENABLING THIS OPTION)
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		Key = {"Example Key"}, -- List of keys that will be accepted by the system, please use a system like Pelican or Luarmor that provide key strings based on your HWID since putting a simple string is very easy to bypass
		SecondAction = {
			Enabled = true, -- Set to false if you do not want a second action,
			Type = "Link", -- Link / Discord.
			Parameter = "" -- If Type is Discord, then put your invite link (DO NOT PUT DISCORD.GG/). Else, put the full link of your key system here.
		}
	}
})


Window:CreateHomeTab({
	SupportedExecutors = {
		"Krnl",
		"ProtoSmasher",
		"Fluxus",
		"Script-Ware",
		"EasyExploits",
		"Electron",
		"JJSploit",
		"Calamari",
		"SirHurt",
		"Sentinel",
		"WEAREDEVS",
		"Comet",
		"Cellery",
		"Wave",
		"CODex",
		"Delta"
	},
	DiscordInvite = "1234", -- same thing here
	Icon = 2
})

local main = Window:CreateTab({
	Name = "main",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

main:CreateButton({
	Name = "Kick Manager & Take Seat",
	Description = "Kicks the Manager using car TP and teleports you to the Manager seat",
	Callback = function()
		local Players = game:GetService("Players")
		local Teams = game:GetService("Teams")
		local Workspace = game:GetService("Workspace")
		local LocalPlayer = Players.LocalPlayer

		local removeModel = Workspace:FindFirstChild("RemoveManager")
		local chairModel = Workspace:FindFirstChild("ManagerChair")

		if not removeModel or not chairModel then
			return PizzaHub:Notification({
				Title = "Error",
				Content = "RemoveManager or ManagerChair model not found.",
				Icon = "error",
				ImageSource = "Material"
			})
		end

		local function getModelPosition(model)
			if model.PrimaryPart then
				return model.PrimaryPart.Position
			end
			for _, part in ipairs(model:GetDescendants()) do
				if part:IsA("BasePart") then
					return part.Position
				end
			end
			return nil
		end

		local kickPosition = getModelPosition(removeModel)
		local chairPosition = getModelPosition(chairModel)

		if not kickPosition or not chairPosition then
			return PizzaHub:Notification({
				Title = "Error",
				Content = "Model positions could not be determined.",
				Icon = "error",
				ImageSource = "Material"
			})
		end

		-- Find player with "Manager" job
		local managerTeam = Teams:FindFirstChild("Manager")
		if not managerTeam then
			return PizzaHub:Notification({
				Title = "Error",
				Content = "Team 'Manager' not found.",
				Icon = "error",
				ImageSource = "Material"
			})
		end

		local manager = nil
		for _, player in ipairs(Players:GetPlayers()) do
			if player.Team == managerTeam then
				manager = player
				break
			end
		end

		if not manager or not manager.Character or not manager.Character:FindFirstChild("HumanoidRootPart") then
			return PizzaHub:Notification({
				Title = "Error",
				Content = "No manager currently in the game.",
				Icon = "error",
				ImageSource = "Material"
			})
		end

		-- Find usable vehicle
		local car, seat, hoodseat
		local localHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
		local originalCFrame = localHRP and localHRP.CFrame

		for _, v in ipairs(workspace:GetDescendants()) do
			if v:IsA("VehicleSeat") and v.Parent:FindFirstChild("HoodSeat") then
				local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
				if v.Occupant == humanoid then
					car = v.Parent
					seat = v
					hoodseat = v.Parent.HoodSeat
					break
				elseif not v.Occupant then
					car = v.Parent
					seat = v
					hoodseat = v.Parent.HoodSeat
					if localHRP then localHRP.CFrame = v.CFrame end
					break
				end
			end
		end

		if not car or not seat or not hoodseat then
			return PizzaHub:Notification({
				Title = "Error",
				Content = "No suitable car found.",
				Icon = "error",
				ImageSource = "Material"
			})
		end

		-- Wait until you are in seat
		repeat task.wait() until seat.Occupant == LocalPlayer.Character:FindFirstChild("Humanoid")

		-- Offset calculation
		local offset = car:GetPrimaryPartCFrame():ToObjectSpace(hoodseat.CFrame)

		-- Move manager to kick position
		local managerHRP = manager.Character:FindFirstChild("HumanoidRootPart")
		repeat
			task.wait()
			car:SetPrimaryPartCFrame(managerHRP.CFrame * offset:Inverse())
		until hoodseat.Occupant == manager.Character:FindFirstChild("Humanoid")

		repeat
			task.wait()
			car:SetPrimaryPartCFrame(CFrame.new(kickPosition) * offset:Inverse())
		until hoodseat.Occupant == nil

		-- Teleport you to ManagerChair
		if localHRP and chairPosition then
			localHRP.CFrame = CFrame.new(chairPosition)
		end

		PizzaHub:Notification({
			Title = "Done",
			Content = "Manager removed and seat taken!",
			Icon = "check_circle",
			ImageSource = "Material"
		})
	end
})


local Traget = Window:CreateTab({
    Name = "Traget",
    Icon = "code",
    ImageSource = "Material",
    ShowTitle = true
}) 


local Players = game:GetService("Players")

-- Hilfsfunktion, um die Optionsliste der Spielernamen zu bekommen
local function getPlayerNames()
    local names = { "None" }
    for _, player in pairs(Players:GetPlayers()) do
        table.insert(names, player.Name)
    end
    return names
end

-- Dropdown erstellen mit dynamischen Optionen
local Dropdown = Traget:CreateDropdown({
    Name = "Select Player",
    Description = "Select a player from the dropdown",
    Options = getPlayerNames(),
    CurrentOption = { "None" },
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(option)
        if option == "None" then
            getgenv().SelectedPlayer = nil
            PizzaHub:Notification({
                Title = "Player Selection",
                Content = "No player selected.",
                Icon = "info",
                ImageSource = "Material"
            })
        else
            getgenv().SelectedPlayer = option
            PizzaHub:Notification({
                Title = "Player Selected",
                Content = "You selected player: " .. option,
                Icon = "person_search",
                ImageSource = "Material"
            })
        end
    end
}, "SelectPlayer")

-- Funktion zum Aktualisieren der Dropdown-Optionen
local function updateDropdown()
    local newOptions = getPlayerNames()
    Dropdown:SetOptions(newOptions)
    -- Falls aktuell ausgew√§hlter Spieler nicht mehr da ist, reset auf None
    if not table.find(newOptions, getgenv().SelectedPlayer) then
        Dropdown:SetValue("None")
        getgenv().SelectedPlayer = nil
    end
end

-- Events zum Aktualisieren bei Join/Leave
Players.PlayerAdded:Connect(function()
    updateDropdown()
end)

Players.PlayerRemoving:Connect(function()
    updateDropdown()
end)

-- Initiales Update
updateDropdown()

-- Tool to select a player by clicking
Traget:CreateButton({
	Name = "Mouse Button To Choose",
	Description = "Click a player to select them via tool",
	Callback = function()
		local localPlayer = Players.LocalPlayer

		local tool = Instance.new("Tool")
		tool.Name = "Player Selector"
		tool.RequiresHandle = false
		tool.CanBeDropped = false
		tool.ToolTip = "Click a player"

		tool.Equipped:Connect(function()
			local mouse = localPlayer:GetMouse()
			mouse.Button1Down:Connect(function()
				local target = mouse.Target
				if target then
					local model = target:FindFirstAncestorOfClass("Model")
					if model and Players:FindFirstChild(model.Name) then
						local selectedName = model.Name
						getgenv().SelectedPlayer = selectedName
						confirmedPlayerName = selectedName

						PizzaHub:Notification({
							Title = "Player Selected",
							Icon = "person_search",
							ImageSource = "Material",
							Content = "Selected: " .. selectedName
						})
					else
						PizzaHub:Notification({
							Title = "No Player Found",
							Icon = "person_off",
							ImageSource = "Material",
							Content = "Please click on a player's character."
						})
					end
				end
			end)
		end)

		tool.Parent = localPlayer.Backpack
	end
})



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer

local flinging = false
local flingDied
local noclipConnection
local currentFling
local followConnection

local function getTargetPlayer()
	local name = tostring(getgenv().SelectedPlayer or ""):lower()
	for _, player in ipairs(Players:GetPlayers()) do
		if player.Name:lower() == name or player.DisplayName:lower() == name then
			return player
		end
	end
end

Traget:CreateToggle({
	Name = "Fling",
	Description = "Flings target player by spinning your character",
	CurrentValue = false,
	Callback = function(enabled)
		local function enableNoclip()
			if noclipConnection then noclipConnection:Disconnect() end
			noclipConnection = RunService.Stepped:Connect(function()
				if flinging and localPlayer.Character and localPlayer.Character:FindFirstChildOfClass("Humanoid") then
					localPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(11) -- Noclip state
				end
			end)
		end

		local function disableNoclip()
			if noclipConnection then
				noclipConnection:Disconnect()
				noclipConnection = nil
			end
		end

		local function setSeatsDisabled(state)
			for _, seat in ipairs(workspace:GetDescendants()) do
				if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
					seat.Disabled = state
				end
			end
		end

		local function startFling(character)
			if not character then return end
			local hrp = character:FindFirstChild("HumanoidRootPart")
			if not hrp then return end

			-- Prepare character parts for flinging
			for _, part in ipairs(character:GetDescendants()) do
				if part:IsA("BasePart") then
					part.CustomPhysicalProperties = PhysicalProperties.new(100, 0.3, 0.5)
					part.CanCollide = false
					part.Massless = true
					part.Velocity = Vector3.zero
				end
			end

			-- Create BodyAngularVelocity to spin character
			local bav = Instance.new("BodyAngularVelocity")
			bav.Name = "FlingForce"
			bav.AngularVelocity = Vector3.new(0, 99999, 0)
			bav.MaxTorque = Vector3.new(0, math.huge, 0)
			bav.P = math.huge
			bav.Parent = hrp
			currentFling = bav

			enableNoclip()

			-- Restart fling on death
			if flingDied then flingDied:Disconnect() end
			local humanoid = character:FindFirstChildOfClass("Humanoid")
			if humanoid then
				flingDied = humanoid.Died:Connect(function()
					localPlayer.CharacterAdded:Wait()
					wait(0.25)
					startFling(localPlayer.Character)
				end)
			end

			-- Follow the target player
			if followConnection then followConnection:Disconnect() end
			followConnection = RunService.Heartbeat:Connect(function()
				local target = getTargetPlayer()
				if target and target.Character and hrp then
					local targetPart = target.Character:FindFirstChild("UpperTorso")
						or target.Character:FindFirstChild("Torso")
						or target.Character:FindFirstChild("HumanoidRootPart")
					if targetPart then
						hrp.CFrame = targetPart.CFrame * CFrame.new(0, 2.5, 0)
					end
				end
			end)
		end

		local function stopFling()
			flinging = false
			if currentFling then currentFling:Destroy() currentFling = nil end
			if flingDied then flingDied:Disconnect() flingDied = nil end
			if followConnection then followConnection:Disconnect() followConnection = nil end
			disableNoclip()

			setSeatsDisabled(false)

			local character = localPlayer.Character
			if character then
				for _, part in ipairs(character:GetDescendants()) do
					if part:IsA("BasePart") then
						part.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
						part.CanCollide = true
						part.Massless = false
					end
				end
			end
		end

		if enabled then
			flinging = true
			setSeatsDisabled(true)
			startFling(localPlayer.Character)
			localPlayer.CharacterAdded:Connect(function(char)
				if flinging then
					wait(0.25)
					startFling(char)
				end
			end)
		else
			stopFling()
		end
	end
}, "ToggleFlingPlayer")



Traget:CreateToggle({
	Name = "Tree Fling",
	Description = "Uproots trees and flings them toward the selected player",
	CurrentValue = false,

	Callback = function(enabled)
		getgenv().nhekee = enabled

		-- Startet den Baum-Ausrei√ü-Thread nur einmal
		if not getgenv().treeUprootThread then
			getgenv().treeUprootThread = task.spawn(function()
				while true do
					task.wait(0.5)
					if getgenv().nhekee then
						pcall(function()
							local treesFolder = workspace:FindFirstChild("Trees")
							local uprootRemote = workspace:FindFirstChild("Main") and workspace.Main:FindFirstChild("UprootTree")
							if not treesFolder or not uprootRemote then return end

							-- Alle B√§ume ausrei√üen (Tree oder DeadTree)
							for _, tree in ipairs(treesFolder:GetDescendants()) do
								if tree.Name == "Tree" or tree.Name == "DeadTree" then
									uprootRemote:FireServer(tree)
								end
							end
						end)
					end
				end
			end)
		end

		-- Teile der B√§ume werden zum ausgew√§hlten Spieler geflogen
		if enabled then
			task.spawn(function()
				local Players = game:GetService("Players")
				local LocalPlayer = Players.LocalPlayer

				while getgenv().nhekee do
					task.wait(1)

					local selectedName = getgenv().SelectedPlayer
					local targetPlayer = selectedName and Players:FindFirstChild(selectedName)
					local torso = targetPlayer
						and targetPlayer.Character
						and (targetPlayer.Character:FindFirstChild("HumanoidRootPart") or targetPlayer.Character:FindFirstChild("Torso"))

					if not torso then continue end

					for _, part in ipairs(workspace:GetDescendants()) do
						if (part:IsA("BasePart") or part:IsA("UnionOperation"))
							and not part.Anchored
							and not part:IsDescendantOf(LocalPlayer.Character) then

							-- Alte Bewegungsobjekte entfernen
							for _, obj in ipairs(part:GetChildren()) do
								if obj:IsA("BodyMover") then
									obj:Destroy()
								end
							end

							-- Teil zum Spieler ziehen
							local bp = Instance.new("BodyPosition")
							bp.Position = torso.Position + Vector3.new(0, 3, 0)
							bp.MaxForce = Vector3.new(1e9, 1e9, 1e9)
							bp.P = 1e5
							bp.Parent = part

							-- Zuf√§llige Geschwindigkeit (f√ºr herumfliegen)
							local bv = Instance.new("BodyVelocity")
							bv.Velocity = Vector3.new(
								math.random(-150, 150),
								math.random(100, 200),
								math.random(-150, 150)
							)
							bv.MaxForce = Vector3.new(1e9, 1e9, 1e9)
							bv.P = 1e5
							bv.Parent = part

							-- Rotation hinzuf√ºgen (explosionsartig)
							local bav = Instance.new("BodyAngularVelocity")
							bav.AngularVelocity = Vector3.new(
								math.random(-50, 50),
								math.random(-50, 50),
								math.random(-50, 50)
							)
							bav.MaxTorque = Vector3.new(1e9, 1e9, 1e9)
							bav.P = 1e5
							bav.Parent = part
						end
					end
				end
			end)
		end
	end
}, "ToggleTreeFling")



local viewPlayerEnabled = false
local viewPlayerConnection = nil

Traget:CreateToggle({
	Name = "View Player",
	Description = "Focuses the camera on the selected player",
	CurrentValue = false,

	Callback = function(enabled)
		viewPlayerEnabled = enabled
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		local selectedName = getgenv().SelectedPlayer
		local camera = workspace.CurrentCamera

		-- Disconnect any previous camera-follow connection
		if viewPlayerConnection then
			viewPlayerConnection:Disconnect()
			viewPlayerConnection = nil
		end

		if enabled then
			if not selectedName or selectedName == "" then
				PizzaHub:Notification({
					Title = "Action Failed",
					Content = "No player selected!",
					Icon = "error",
					ImageSource = "Material"
				})
				return
			end

			local TargetPlayer = Players:FindFirstChild(selectedName)
			if not TargetPlayer then
				PizzaHub:Notification({
					Title = "Action Failed",
					Content = "Player '" .. selectedName .. "' not found!",
					Icon = "error",
					ImageSource = "Material"
				})
				return
			end

			local function setCameraSubject()
				if TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("Humanoid") then
					camera.CameraSubject = TargetPlayer.Character.Humanoid
					PizzaHub:Notification({
						Title = "View Player",
						Content = "Now viewing '" .. selectedName .. "'",
						Icon = "visibility",
						ImageSource = "Material"
					})
				else
					warn("Target character or humanoid not found!")
				end
			end

			setCameraSubject()
			viewPlayerConnection = TargetPlayer.CharacterAdded:Connect(setCameraSubject)

		else
			-- Reset camera to your own character
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
				camera.CameraSubject = LocalPlayer.Character.Humanoid
			end
		end
	end,
}, "ToggleViewPlayer")


Traget:CreateButton({
    Name = "Bring Player To You",
    Description = "Brings the selected player into your vehicle and returns you to your original position.",

    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local selectedName = getgenv().SelectedPlayer

        if not selectedName or selectedName == "" then
            PizzaHub:Notification({
                Title = "Action Failed",
                Content = "No player selected!",
                Icon = "error",
                ImageSource = "Material"
            })
            return
        end

        local TargetPlayer = Players:FindFirstChild(selectedName)
        if not TargetPlayer then
            PizzaHub:Notification({
                Title = "Action Failed",
                Content = "Player '" .. selectedName .. "' not found!",
                Icon = "error",
                ImageSource = "Material"
            })
            return
        end

        local character = LocalPlayer.Character
        if not character then
            PizzaHub:Notification({
                Title = "Action Failed",
                Content = "Local player character not found!",
                Icon = "error",
                ImageSource = "Material"
            })
            return
        end

        local hrp = character:FindFirstChild("HumanoidRootPart")
        if not hrp then
            PizzaHub:Notification({
                Title = "Action Failed",
                Content = "Local player HumanoidRootPart not found!",
                Icon = "error",
                ImageSource = "Material"
            })
            return
        end

        -- Speichere deine aktuelle Position
        local originalCFrame = hrp.CFrame

        -- Suche Fahrzeug mit freiem Sitz oder in dem du sitzt
        local car, seat, hoodseat
        for _, v in ipairs(workspace:GetDescendants()) do
            if v:IsA("VehicleSeat") then
                if v.Occupant == character.Humanoid and v.Parent:FindFirstChild("HoodSeat") then
                    car = v.Parent
                    seat = v
                    hoodseat = v.Parent:FindFirstChild("HoodSeat")
                    break
                elseif v.Occupant == nil and v.Parent:FindFirstChild("HoodSeat") then
                    car = v.Parent
                    seat = v
                    hoodseat = v.Parent:FindFirstChild("HoodSeat")
                    -- Setze dich in den freien Sitz
                    character.HumanoidRootPart.CFrame = v.CFrame
                    break
                end
            end
        end

        if not car or not seat or not hoodseat then
            PizzaHub:Notification({
                Title = "Action Failed",
                Content = "No suitable vehicle with free seat found!",
                Icon = "error",
                ImageSource = "Material"
            })
            return
        end

        -- Warte bis du sitzt
        repeat task.wait() until seat.Occupant == character.Humanoid

        -- Offset zwischen Auto Hauptteil und HoodSeat
        local offset = car:GetPrimaryPartCFrame():ToObjectSpace(hoodseat.CFrame)

        -- Teleportiere das Auto mit dir zum Zielspieler
        local targetHRP = TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not targetHRP then
            PizzaHub:Notification({
                Title = "Action Failed",
                Content = "Target player HumanoidRootPart not found!",
                Icon = "error",
                ImageSource = "Material"
            })
            return
        end

        car:SetPrimaryPartCFrame(targetHRP.CFrame * offset:Inverse())
        -- Warte einen Moment, bis das Auto ankommt
        task.wait(0.5)

        -- Warte, bis der Spieler in den HoodSeat einsteigt
        repeat task.wait() until hoodseat.Occupant == TargetPlayer.Character.Humanoid

        -- Teleportiere dich zur√ºck an die urspr√ºngliche Position mit dem Auto
        car:SetPrimaryPartCFrame(originalCFrame * offset:Inverse())

        -- Warte bis du wieder sitzt
        repeat task.wait() until seat.Occupant == character.Humanoid

        PizzaHub:Notification({
            Title = "Success",
            Content = "Player '" .. selectedName .. "' was brought to you and you returned to your position!",
            Icon = "check_circle",
            ImageSource = "Material"
        })
    end,
})




local viewPlayerEnabled = false
local viewPlayerConnection = nil

Traget:CreateToggle({
	Name = "View Player",
	Description = "Focus the camera on the selected player.",
	CurrentValue = false,

	Callback = function(enabled)
		viewPlayerEnabled = enabled

		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		local camera = workspace.CurrentCamera
		local selectedName = getgenv().SelectedPlayer

		-- Disconnect any previous connection
		if viewPlayerConnection then
			viewPlayerConnection:Disconnect()
			viewPlayerConnection = nil
		end

		if enabled then
			if not selectedName or selectedName == "" then
				PizzaHub:Notification({
					Title = "Action Failed",
					Content = "No player selected!",
					Icon = "error",
					ImageSource = "Material"
				})
				return
			end

			local TargetPlayer = Players:FindFirstChild(selectedName)
			if not TargetPlayer then
				PizzaHub:Notification({
					Title = "Action Failed",
					Content = "Player '" .. selectedName .. "' not found!",
					Icon = "error",
					ImageSource = "Material"
				})
				return
			end

			local function setCameraSubject()
				if TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("Humanoid") then
					camera.CameraSubject = TargetPlayer.Character.Humanoid
					PizzaHub:Notification({
						Title = "View Player",
						Content = "Now viewing '" .. selectedName .. "'",
						Icon = "visibility",
						ImageSource = "Material"
					})
				else
					warn("Target player character or humanoid not found.")
				end
			end

			-- Set initial camera target
			setCameraSubject()

			-- Reapply if player respawns
			viewPlayerConnection = TargetPlayer.CharacterAdded:Connect(setCameraSubject)

		else
			-- Reset camera to local player
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
				camera.CameraSubject = LocalPlayer.Character.Humanoid
			end
		end
	end,
}, "ToggleViewPlayer")

Traget:CreateButton({
	Name = "Throw Player Far Away",
	Description = "Throws the selected player far away using your vehicle",
	Callback = function()
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		local selectedName = getgenv().SelectedPlayer

		-- Check if player is selected
		if not selectedName or selectedName == "" then
			return PizzaHub:Notification({
				Title = "Failed",
				Content = "No player selected!",
				Icon = "error",
				ImageSource = "Material"
			})
		end

		local TargetPlayer = Players:FindFirstChild(selectedName)
		if not TargetPlayer or not TargetPlayer.Character or not TargetPlayer.Character:FindFirstChild("HumanoidRootPart") then
			return PizzaHub:Notification({
				Title = "Failed",
				Content = "Player '" .. selectedName .. "' not found!",
				Icon = "error",
				ImageSource = "Material"
			})
		end

		local character = LocalPlayer.Character
		local hrp = character and character:FindFirstChild("HumanoidRootPart")
		if not hrp then return end

		local originalCFrame = hrp.CFrame
		local car, seat, hoodseat

		-- Find a vehicle: either one the player is in, or an empty one
		for _, v in ipairs(workspace:GetDescendants()) do
			if v:IsA("VehicleSeat") and v.Parent:FindFirstChild("HoodSeat") then
				if v.Occupant == character:FindFirstChild("Humanoid") then
					car = v.Parent
					seat = v
					hoodseat = v.Parent.HoodSeat
					break
				elseif v.Occupant == nil then
					car = v.Parent
					seat = v
					hoodseat = v.Parent.HoodSeat
					hrp.CFrame = seat.CFrame -- teleport player into seat
					break
				end
			end
		end

		if not seat or not hoodseat or not car then
			return PizzaHub:Notification({
				Title = "Error",
				Content = "No suitable vehicle with a HoodSeat found.",
				Icon = "error",
				ImageSource = "Material"
			})
		end

		-- Wait until we are seated
		repeat task.wait() until seat.Occupant == character:FindFirstChild("Humanoid")

		-- Calculate offset between vehicle and hood seat
		local offset = car:GetPrimaryPartCFrame():ToObjectSpace(hoodseat.CFrame)

		-- Teleport vehicle to target player until they enter the hood seat
		local targetHRP = TargetPlayer.Character:FindFirstChild("HumanoidRootPart")
		repeat
			task.wait()
			car:SetPrimaryPartCFrame(targetHRP.CFrame * offset:Inverse())
		until hoodseat.Occupant == TargetPlayer.Character:FindFirstChild("Humanoid")

		-- Define a far-away position
		local farAway = Vector3.new(-4492, 534, -686)

		-- Teleport vehicle to far away location until the player gets thrown off
		repeat
			task.wait()
			car:SetPrimaryPartCFrame(CFrame.new(farAway) * offset:Inverse())
		until hoodseat.Occupant == nil

		-- Return local player to their original position
		if hrp then
			hrp.CFrame = originalCFrame
		end

		PizzaHub:Notification({
			Title = "Success",
			Content = "Player '" .. selectedName .. "' was thrown far away!",
			Icon = "check_circle",
			ImageSource = "Material"
		})
	end,
})


Traget:CreateButton({
	Name = "Kill Player",
	Description = "Kills the selected player by launching them to a death position",
	Callback = function()
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		local selectedName = getgenv().SelectedPlayer

		-- Ensure a player is selected
		if not selectedName or selectedName == "" then
			return PizzaHub:Notification({
				Title = "Failed",
				Content = "No player selected!",
				Icon = "error",
				ImageSource = "Material"
			})
		end

		local TargetPlayer = Players:FindFirstChild(selectedName)
		if not TargetPlayer or not TargetPlayer.Character or not TargetPlayer.Character:FindFirstChild("HumanoidRootPart") then
			return PizzaHub:Notification({
				Title = "Failed",
				Content = "Player '" .. selectedName .. "' not found!",
				Icon = "error",
				ImageSource = "Material"
			})
		end

		local car, seat, hoodseat
		local playerHRP = TargetPlayer.Character:FindFirstChild("HumanoidRootPart")
		local localHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
		local originalCFrame = localHRP and localHRP.CFrame

		-- Look for a suitable vehicle (empty or already used)
		for _, v in ipairs(workspace:GetDescendants()) do
			if v:IsA("VehicleSeat") and v.Parent:FindFirstChild("HoodSeat") then
				local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
				if v.Occupant == humanoid then
					car = v.Parent
					seat = v
					hoodseat = v.Parent.HoodSeat
					break
				elseif not v.Occupant then
					car = v.Parent
					seat = v
					hoodseat = v.Parent.HoodSeat
					if localHRP then localHRP.CFrame = v.CFrame end
					break
				end
			end
		end

		if not car or not seat or not hoodseat then
			return PizzaHub:Notification({
				Title = "Error",
				Content = "No suitable vehicle with HoodSeat found.",
				Icon = "error",
				ImageSource = "Material"
			})
		end

		-- Wait until seated
		repeat task.wait() until seat.Occupant == LocalPlayer.Character:FindFirstChild("Humanoid")

		-- Calculate relative offset between hoodseat and car
		local offset = car:GetPrimaryPartCFrame():ToObjectSpace(hoodseat.CFrame)

		-- Move car to player until they are seated in hoodseat
		repeat
			task.wait()
			car:SetPrimaryPartCFrame(playerHRP.CFrame * offset:Inverse())
		until hoodseat.Occupant == TargetPlayer.Character:FindFirstChild("Humanoid")

		-- Define a deadly position (adjust as needed)
		local killPosition = Vector3.new(44, 25, -13)

		-- Fling player to kill position
		repeat
			task.wait()
			car:SetPrimaryPartCFrame(CFrame.new(killPosition) * offset:Inverse())
		until hoodseat.Occupant == nil

		-- Restore local player's original position
		if originalCFrame and localHRP then
			localHRP.CFrame = originalCFrame
		end

		PizzaHub:Notification({
			Title = "Success",
			Content = "Player '" .. selectedName .. "' has been killed!",
			Icon = "check_circle",
			ImageSource = "Material"
		})
	end,
})

Traget:CreateToggle({
    Name = "Spam Snowballs",
    Description = "Continuously throws snowballs at the selected player.",
    CurrentValue = false,
    Flag = "ToggleSpamSnowballs",

    Callback = function(enabled)
        getgenv().SnowballThrowingEnabled = enabled

        local Players = game:GetService("Players")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local LocalPlayer = Players.LocalPlayer

        if enabled then
            PizzaHub:Notification({
                Title = "Snowball Spam",
                Content = "Snowball spam enabled!",
                Icon = "check_circle",
                ImageSource = "Material"
            })

            local function getTargetPosition()
                local selectedName = getgenv().SelectedPlayer
                local target = selectedName and Players:FindFirstChild(selectedName)
                local torso = target and target.Character and (
                    target.Character:FindFirstChild("UpperTorso") or
                    target.Character:FindFirstChild("Torso")
                )
                return torso and torso.Position or Vector3.new(0, 50, 0)
            end

            getgenv().SnowballThread = task.spawn(function()
                while getgenv().SnowballThrowingEnabled do
                    task.wait(0.5)

                    local backpack = LocalPlayer:FindFirstChild("Backpack")
                    local character = LocalPlayer.Character
                    if not backpack or not character then
                        warn("Backpack oder Charakter fehlt, abbrechen")
                        break
                    end

                    -- Alte Snowballs l√∂schen
                    for _, tool in ipairs(backpack:GetChildren()) do
                        if tool:IsA("Tool") and tool.Name == "Snowball" then
                            tool:Destroy()
                        end
                    end
                    for _, tool in ipairs(character:GetChildren()) do
                        if tool:IsA("Tool") and tool.Name == "Snowball" then
                            tool:Destroy()
                        end
                    end

                    -- Neue Snowballs anfordern
                    for i = 1, 5 do -- erstmal nur 5 statt 7
                        ReplicatedStorage:WaitForChild("PlayerChannel"):FireServer("GiveItem", 19328185)
                        task.wait(0.2)
                    end

                    local waitCount = 0
                    repeat
                        task.wait(0.1)
                        waitCount = waitCount + 1
                        if waitCount > 100 then -- nach 10 Sekunden abbrechen
                            warn("Wartezeit f√ºr Snowballs √ºberschritten!")
                            break
                        end
                    until #backpack:GetChildren() >= 5

                    -- Snowballs werfen
                    for _, tool in ipairs(backpack:GetChildren()) do
                        if tool:IsA("Tool") and tool.Name == "Snowball" then
                            tool.Parent = character
                            task.wait(0.1)

                            local clickEvent = tool:FindFirstChild("Clicked")
                            if clickEvent and clickEvent:IsA("RemoteEvent") then
                                local targetPos = getTargetPosition()
                                local success, err = pcall(function()
                                    clickEvent:FireServer(targetPos)
                                end)
                                if not success then warn("ClickEvent Fehler:", err) end
                            else
                                local success, err = pcall(function()
                                    tool:Activate()
                                end)
                                if not success then warn("Tool Activate Fehler:", err) end
                            end

                            task.wait(0.1)
                        end
                    end
                end
                print("Snowball Spam Thread beendet")
            end)

        else
            getgenv().SnowballThrowingEnabled = false
            PizzaHub:Notification({
                Title = "Snowball Spam",
                Content = "Snowball spam disabled.",
                Icon = "info",
                ImageSource = "Material"
            })
        end
    end,
})


local Teleports = Window:CreateTab({
    Name = "Teleports",
    Icon = "code",
    ImageSource = "Material",
    ShowTitle = true
})

local Players = game:GetService("Players")
local player = Players.LocalPlayer

Teleports:CreateDropdown({
    Name = "Teleport to area",
    Description = nil,
    Options = { "None", "Spawn", "Manager", "Cashier", "Cook", "Boxer", "Delivery", "Supplier" },
    CurrentOption = { "None" },
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(option)
        if type(option) == "table" then option = option[1] end

        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        if not hrp then return end

        local locations = {
            Spawn = Vector3.new(49, 3, 198),
            Manager = Vector3.new(37, 4, 3),
            Cashier = Vector3.new(48, 4, 80),
            Cook = Vector3.new(42, 4, 61),
            Boxer = Vector3.new(55, 4, 31),
            Delivery = Vector3.new(64, 4, -17),
            Supplier = Vector3.new(8, 13, -1020)
        }

        if locations[option] then
            hrp.CFrame = CFrame.new(locations[option])
        end
    end
}, "TeleportArea")


local Players = game:GetService("Players")
local player = Players.LocalPlayer

Teleports:CreateDropdown({
    Name = "Teleport to house",
    Description = nil,
    Options = { "None", "Home", "A1", "A2", "A3", "B1", "B2", "B3", "B4", "B5", "B6", "C1", "C2", "C3" },
    CurrentOption = { "None" },
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(option)
        if type(option) == "table" then option = option[1] end

        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        if not hrp then return end

        local coords = {
            A1 = Vector3.new(190, 3, -474),
            A2 = Vector3.new(188, 3, -652),
            A3 = Vector3.new(187, 3, -823),
            B1 = Vector3.new(-21, 3, -432),
            B2 = Vector3.new(24, 3, -481),
            B3 = Vector3.new(-20, 3, -612),
            B4 = Vector3.new(24, 3, -663),
            B5 = Vector3.new(-20, 3, -800),
            B6 = Vector3.new(23, 3, -836),
            C1 = Vector3.new(-184, 3, -444),
            C2 = Vector3.new(-186, 3, -612),
            C3 = Vector3.new(-185, 3, -792)
        }

        if option == "Home" then
            game:GetService("ReplicatedStorage").PlayerChannel:FireServer("TeleportHome")
        elseif coords[option] then
            hrp.CFrame = CFrame.new(coords[option])
        end
    end
}, "TeleportHouse")

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer

local islandOptions = { "None", "Pirate Island", "Stone Island", "Sand Island", "Teleport to Party Island" }
local islandModelName = {
    ["Pirate Island"] = "Island",
    ["Stone Island"] = "Island1",
    ["Sand Island"] = "Island2"
}

Teleports:CreateDropdown({
    Name = "Teleport to island",
    Description = nil,
    Options = islandOptions,
    CurrentOption = { "None" },
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(option)
        if type(option) == "table" then option = option[1] end

        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")

        if islandModelName[option] then
            local model = Workspace:FindFirstChild(islandModelName[option])
            if model and model:IsA("Model") then
                local targetCFrame = model:GetPivot() + Vector3.new(0, 20, 0)
                if hrp then
                    hrp.CFrame = targetCFrame
                end
            end
        elseif option == "Teleport to Party Island" then
            if hrp then
                hrp.CFrame = CFrame.new(88, 1, -315)
            end
        end
    end
}, "TeleportIslands")




local Scripts = Window:CreateTab({
    Name = "Scripts",
    Icon = "code",
    ImageSource = "Material",
    ShowTitle = true
})


Scripts:CreateLabel({
	Text = "Warning, use this Farm whit alt account, this is ban risk on main account",
	Style = 3
})

Scripts:CreateButton({
	Name = "Auto Farm",
	Description = nil,
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/K0RoS3nPa1/Lua/refs/heads/main/lua2"))()
	end
})

Scripts:CreateButton({
    Name = "Pizza hub 2.0",
    Description = "by AFP",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/ImARandom44/AFP/refs/heads/main/Source"))()
    end
})

Scripts:CreateButton({
    Name = "Hussien",
    Description = nil,
    Callback = function()
        loadstring(game:HttpGet(('https://raw.githubusercontent.com/Hm5011/hussain/refs/heads/main/Work%20at%20a%20pizza%20place'),true))()
    end
})

Scripts:CreateButton({
    Name = "invinite yield",
    Description = nil,
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()

    end
})


local Theme = Window:CreateTab({
	Name = "Theme",
	Icon = "palette",
	ImageSource = "Material",
	ShowTitle = true
})
Theme:BuildThemeSection()

local Settings = Window:CreateTab({
	Name = "Settings",
	Icon = "settings",
	ImageSource = "Material",
	ShowTitle = true
})

Settings:BuildConfigSection()



