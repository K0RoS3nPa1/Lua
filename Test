local PizzaHub = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/master/source.lua", true))()
local version = "1.0.0"

local Window = PizzaHub:CreateWindow({
	Name = "Pizza Hub", -- This Is Title Of Your Window
	Subtitle = version, -- A Gray Subtitle next To the main title.
	LogoID = nil, -- The Asset ID of your logo. Set to nil if you do not have a logo for Luna to use.
	LoadingEnabled = false, -- Whether to enable the loading animation. Set to false if you do not want the loading screen or have your own custom one.
	LoadingTitle = "", -- Header for loading screen
	LoadingSubtitle = "", -- Subtitle for loading screen

	ConfigSettings = {
		RootFolder = nil, -- The Root Folder Is Only If You Have A Hub With Multiple Game Scripts and u may remove it. DO NOT ADD A SLASH
		ConfigFolder = "Pizza hub" -- The Name Of The Folder Where Luna Will Store Configs For This Script. DO NOT ADD A SLASH
	},

	KeySystem = false, -- As Of Beta 6, Luna Has officially Implemented A Key System!
	KeySettings = {
		Title = "Luna Example Key",
		Subtitle = "Key System",
		Note = "Best Key System Ever! Also, Please Use A HWID Keysystem like Pelican, Luarmor etc. that provide key strings based on your HWID since putting a simple string is very easy to bypass",
		SaveInRoot = false, -- Enabling will save the key in your RootFolder (YOU MUST HAVE ONE BEFORE ENABLING THIS OPTION)
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		Key = {"Example Key"}, -- List of keys that will be accepted by the system, please use a system like Pelican or Luarmor that provide key strings based on your HWID since putting a simple string is very easy to bypass
		SecondAction = {
			Enabled = true, -- Set to false if you do not want a second action,
			Type = "Link", -- Link / Discord.
			Parameter = "" -- If Type is Discord, then put your invite link (DO NOT PUT DISCORD.GG/). Else, put the full link of your key system here.
		}
	}
})


Window:CreateHomeTab({
	SupportedExecutors = {
		"Krnl",
		"ProtoSmasher",
		"Fluxus",
		"Script-Ware",
		"EasyExploits",
		"Electron",
		"JJSploit",
		"Calamari",
		"SirHurt",
		"Sentinel",
		"WEAREDEVS",
		"Comet",
		"Cellery",
		"Wave",
		"CODex",
		"Delta"
	},
	DiscordInvite = "1234", -- same thing here
	Icon = 2
})

local main = Window:CreateTab({
	Name = "main",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local tragettab = Window:CreateTab({
    Name = "Traget",
    Icon = "",
    ImageSource = "Material",
    ShowTitle = true
}) 

local playerInputElement

playerInputElement = tragettab:CreateInput({
	Name = "Type Player Username",
	Description = nil,
	PlaceholderText = "Enter Player Username",
	CurrentValue = "",
	Numeric = false,
	MaxCharacters = nil,
	Enter = false,
	Callback = function(username)
		getgenv().SelectedPlayer = username
		PizzaHub:Notification({
			Title = "Player Selected",
			Icon = "person_search",
			ImageSource = "Material",
			Content = "You selected: " .. tostring(username)
		})
	end
}, "SelectedPlayerInput")

-- Funktion zum Setzen des Input-Feldes (falls die Library das zul채sst)
function SetPlayerInput(value)
	if playerInputElement and playerInputElement.Set then
		playerInputElement:Set(value)
	elseif playerInputElement and playerInputElement.SetValue then
		playerInputElement:SetValue(value)
	elseif playerInputElement then
		-- Fallback f체r Libraries ohne direkte Set-Methode
		warn("Set-Methode f체r Input-Feld ist nicht verf체gbar.")
	end
end



tragettab:CreateButton({
	Name = "Mouse Button To Choose",
	Description = "Click a player to select them via tool",
	Callback = function()
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer

		local selectTool = Instance.new("Tool")
		selectTool.Name = "Player Selector"
		selectTool.RequiresHandle = false
		selectTool.TextureId = "rbxassetid://114058734028941"

		selectTool.Activated:Connect(function()
			local mouse = LocalPlayer:GetMouse()
			local target = mouse.Target
			if target then
				local model = target:FindFirstAncestorOfClass("Model")
				if model and Players:FindFirstChild(model.Name) then
					local selectedName = model.Name
					if playerInputElement and playerInputElement.Set then
						playerInputElement:Set(selectedName)
					elseif playerInputElement and playerInputElement.SetValue then
						playerInputElement:SetValue(selectedName)
					end

					PizzaHub:Notification({
						Title = "Player Selected",
						Icon = "person_search",
						ImageSource = "Material",
						Content = "Selected: " .. selectedName
					})
				else
					PizzaHub:Notification({
						Title = "No Player Found",
						Icon = "person_off",
						ImageSource = "Material",
						Content = "Please click on a player's character."
					})
				end
			end
		end)

		selectTool.Parent = LocalPlayer.Backpack
	end
})


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local speaker = Players.LocalPlayer

local flinging = false
local flingDied
local noclipConnection
local currentFling
local followConnection

local function getTargetPlayer()
	local name = tostring(getgenv().SelectedPlayer or ""):lower()
	for _, player in ipairs(Players:GetPlayers()) do
		if player.Name:lower() == name or player.DisplayName:lower() == name then
			return player
		end
	end
end

tragettab:CreateToggle({
	Name = "Fling",
	Description = "Flings target player by spinning your character",
	CurrentValue = false,
	Callback = function(Enabled)
		local function enableNoclip()
			if noclipConnection then noclipConnection:Disconnect() end
			noclipConnection = game:GetService("RunService").Stepped:Connect(function()
				if flinging and speaker.Character and speaker.Character:FindFirstChildOfClass("Humanoid") then
					speaker.Character:FindFirstChildOfClass("Humanoid"):ChangeState(11)
				end
			end)
		end

		local function disableNoclip()
			if noclipConnection then
				noclipConnection:Disconnect()
				noclipConnection = nil
			end
		end

		local function setSeatsDisabled(state)
			for _, seat in ipairs(workspace:GetDescendants()) do
				if seat:IsA("Seat") or seat:IsA("VehicleSeat") then
					seat.Disabled = state
				end
			end
		end

		local function startFling(char)
			if not char then return end
			local hrp = char:FindFirstChild("HumanoidRootPart")
			if not hrp then return end

			for _, part in ipairs(char:GetDescendants()) do
				if part:IsA("BasePart") then
					part.CustomPhysicalProperties = PhysicalProperties.new(100, 0.3, 0.5)
					part.CanCollide = false
					part.Massless = true
					part.Velocity = Vector3.zero
				end
			end

			local bav = Instance.new("BodyAngularVelocity")
			bav.Name = "FlingForce"
			bav.AngularVelocity = Vector3.new(0, 99999, 0)
			bav.MaxTorque = Vector3.new(0, math.huge, 0)
			bav.P = math.huge
			bav.Parent = hrp
			currentFling = bav

			enableNoclip()

			if flingDied then flingDied:Disconnect() end
			local humanoid = char:FindFirstChildOfClass("Humanoid")
			if humanoid then
				flingDied = humanoid.Died:Connect(function()
					speaker.CharacterAdded:Wait()
					wait(0.25)
					startFling(speaker.Character)
				end)
			end

			if followConnection then followConnection:Disconnect() end
			followConnection = game:GetService("RunService").Heartbeat:Connect(function()
				local target = getTargetPlayer()
				if target and target.Character and hrp then
					local tgtPart = target.Character:FindFirstChild("UpperTorso") or target.Character:FindFirstChild("Torso") or target.Character:FindFirstChild("HumanoidRootPart")
					if tgtPart then
						hrp.CFrame = tgtPart.CFrame * CFrame.new(0, 2.5, 0)
					end
				end
			end)
		end

		local function stopFling()
			flinging = false
			if currentFling then currentFling:Destroy() currentFling = nil end
			if flingDied then flingDied:Disconnect() flingDied = nil end
			if followConnection then followConnection:Disconnect() followConnection = nil end
			disableNoclip()

			setSeatsDisabled(false)

			local char = speaker.Character
			if char then
				for _, part in ipairs(char:GetDescendants()) do
					if part:IsA("BasePart") then
						part.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
						part.CanCollide = true
						part.Massless = false
					end
				end
			end
		end

		if Enabled then
			flinging = true
			setSeatsDisabled(true)
			startFling(speaker.Character)
			speaker.CharacterAdded:Connect(function(char)
				if flinging then
					wait(0.25)
					startFling(char)
				end
			end)
		else
			stopFling()
		end
	end
}, "ToggleFlingPlayer")


local Toggle = Tab:CreateToggle({
	Name = "Tree Fling",
	Description = "Uproots trees and flings them toward the selected player",
	CurrentValue = false,
	Callback = function(Enabled)
		getgenv().nhekee = Enabled

		if not getgenv().treeUprootThread then
			getgenv().treeUprootThread = coroutine.create(function()
				while true do
					task.wait(0.5)
					if getgenv().nhekee then
						pcall(function()
							local treesFolder = workspace:FindFirstChild("Trees")
							local uprootRemote = workspace:FindFirstChild("Main") and workspace.Main:FindFirstChild("UprootTree")
							if not treesFolder or not uprootRemote then return end

							for _, descendant in pairs(treesFolder:GetDescendants()) do
								if descendant.Name == "Tree" or descendant.Name == "DeadTree" then
									uprootRemote:FireServer(descendant)
								end
							end
						end)
					end
				end
			end)
			coroutine.resume(getgenv().treeUprootThread)
		end

		if Enabled then
			task.spawn(function()
				while getgenv().nhekee do
					task.wait(1)
					local Players = game:GetService("Players")
					local selectedName = getgenv().SelectedPlayer
					local target = selectedName and Players:FindFirstChild(selectedName)
					local torso = target and target.Character and (
						target.Character:FindFirstChild("HumanoidRootPart") or
						target.Character:FindFirstChild("Torso")
					)

					if not torso then continue end

					for _, part in pairs(workspace:GetDescendants()) do
						if (part:IsA("BasePart") or part:IsA("UnionOperation"))
						and not part.Anchored
						and not part:IsDescendantOf(Players.LocalPlayer.Character) then
							-- Entferne alte Bewegungs-Objekte
							for _, mv in ipairs(part:GetChildren()) do
								if mv:IsA("BodyMover") then
									mv:Destroy()
								end
							end

							-- Bewege Baum zum Spieler
							local bp = Instance.new("BodyPosition")
							bp.Position = torso.Position + Vector3.new(0, 3, 0)
							bp.MaxForce = Vector3.new(1e9, 1e9, 1e9)
							bp.P = 1e5
							bp.Parent = part

							-- Fling Effekt hinzuf체gen
							local bv = Instance.new("BodyVelocity")
							bv.Velocity = Vector3.new(
								math.random(-150, 150),
								math.random(100, 200),
								math.random(-150, 150)
							)
							bv.MaxForce = Vector3.new(1e9, 1e9, 1e9)
							bv.P = 1e5
							bv.Parent = part

							local bav = Instance.new("BodyAngularVelocity")
							bav.AngularVelocity = Vector3.new(
								math.random(-50, 50),
								math.random(-50, 50),
								math.random(-50, 50)
							)
							bav.MaxTorque = Vector3.new(1e9, 1e9, 1e9)
							bav.P = 1e5
							bav.Parent = part
						end
					end
				end
			end)
		end
	end
}, "ToggleTreeFling")

tragettab:CreateButton({
	Name = "Goto Player",
	Description = "Teleportiere dich zum ausgew채hlten Spieler",
	Callback = function()
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		local selectedName = getgenv().SelectedPlayer

		if not selectedName or selectedName == "" then
			PizzaHub:Notification({
				Title = "Teleportation fehlgeschlagen",
				Content = "Kein Spieler ausgew채hlt!",
				Icon = "error",
				ImageSource = "Material"
			})
			return
		end

		local TargetPlayer = Players:FindFirstChild(selectedName)
		if not TargetPlayer then
			PizzaHub:Notification({
				Title = "Teleportation fehlgeschlagen",
				Content = "Spieler '" .. selectedName .. "' nicht gefunden!",
				Icon = "error",
				ImageSource = "Material"
			})
			return
		end

		local TargetCharacter = TargetPlayer.Character
		local LocalCharacter = LocalPlayer.Character

		if TargetCharacter and LocalCharacter then
			local TargetHumanoidRootPart = TargetCharacter:FindFirstChild("HumanoidRootPart")
			local LocalHumanoidRootPart = LocalCharacter:FindFirstChild("HumanoidRootPart")

			if TargetHumanoidRootPart and LocalHumanoidRootPart then
				LocalHumanoidRootPart.CFrame = TargetHumanoidRootPart.CFrame
				PizzaHub:Notification({
					Title = "Teleportation erfolgreich",
					Content = "Zu Spieler '" .. selectedName .. "' teleportiert!",
					Icon = "check_circle",
					ImageSource = "Material"
				})
			else
				PizzaHub:Notification({
					Title = "Teleportation fehlgeschlagen",
					Content = "HumanoidRootPart bei einem der Spieler nicht gefunden!",
					Icon = "error",
					ImageSource = "Material"
				})
			end
		else
			PizzaHub:Notification({
				Title = "Teleportation fehlgeschlagen",
				Content = "Charakter bei einem der Spieler nicht gefunden!",
				Icon = "error",
				ImageSource = "Material"
			})
		end
	end,
})

tragettab:CreateButton({
	Name = "Bring Player To You",
	Description = "Bringt den ausgew채hlten Spieler zu dir ins Fahrzeug",
	Callback = function()
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		local selectedName = getgenv().SelectedPlayer

		if not selectedName or selectedName == "" then
			PizzaHub:Notification({
				Title = "Aktion fehlgeschlagen",
				Content = "Kein Spieler ausgew채hlt!",
				Icon = "error",
				ImageSource = "Material"
			})
			return
		end

		local TargetPlayer = Players:FindFirstChild(selectedName)
		if not TargetPlayer then
			PizzaHub:Notification({
				Title = "Aktion fehlgeschlagen",
				Content = "Spieler '" .. selectedName .. "' nicht gefunden!",
				Icon = "error",
				ImageSource = "Material"
			})
			return
		end

		local car, seat, hoodseat, offset
		local player = TargetPlayer

		for _, v in ipairs(workspace:GetDescendants()) do
			if v:IsA("VehicleSeat") and v.Occupant == LocalPlayer.Character.Humanoid then
				if v.Parent:FindFirstChild("HoodSeat") then
					car = v.Parent
					seat = v
					hoodseat = v.Parent.HoodSeat
					break
				end
			elseif v:IsA("VehicleSeat") and v.Occupant == nil then
				if v.Parent:FindFirstChild("HoodSeat") then
					car = v.Parent
					seat = v
					hoodseat = v.Parent.HoodSeat
					LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
					break
				end
			end
		end

		if not seat then
			PizzaHub:Notification({
				Title = "Aktion fehlgeschlagen",
				Content = "Kein geeignetes Fahrzeug mit freiem Sitz gefunden!",
				Icon = "error",
				ImageSource = "Material"
			})
			return
		end

		repeat task.wait() until seat.Occupant == LocalPlayer.Character.Humanoid
		offset = car:GetPrimaryPartCFrame():ToObjectSpace(hoodseat.CFrame)

		repeat task.wait()
			car:SetPrimaryPartCFrame(player.Character.HumanoidRootPart.CFrame * offset:Inverse())
		until hoodseat.Occupant == player.Character.Humanoid

		local myHRP = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
		local targetHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
		if myHRP and targetHRP then
			targetHRP.CFrame = myHRP.CFrame
		end

		repeat
			task.wait()
			car:SetPrimaryPartCFrame(player.Character.HumanoidRootPart.CFrame * offset:Inverse())
		until hoodseat.Occupant == nil

		-- Optional: Urspr체ngliche Position zur체cksetzen, falls gespeichert
		-- local originalCarCFrame = car and car:GetPrimaryPartCFrame()
		-- if originalCarCFrame and car then
		--     car:SetPrimaryPartCFrame(originalCarCFrame)
		-- end

		PizzaHub:Notification({
			Title = "Erfolg",
			Content = "Spieler '" .. selectedName .. "' wurde zu dir gebracht!",
			Icon = "check_circle",
			ImageSource = "Material"
		})
	end,
})


local viewPlayerEnabled = false
local viewPlayerConnection = nil

tragettab:CreateToggle({
	Name = "View Player",
	Description = "Kamera auf den ausgew채hlten Spieler fokussieren",
	CurrentValue = false,
	Callback = function(Enabled)
		viewPlayerEnabled = Enabled
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		local selectedName = getgenv().SelectedPlayer
		local camera = workspace.CurrentCamera

		-- Vorherige Verbindung trennen
		if viewPlayerConnection then
			viewPlayerConnection:Disconnect()
			viewPlayerConnection = nil
		end

		if Enabled then
			if not selectedName or selectedName == "" then
				PizzaHub:Notification({
					Title = "Aktion fehlgeschlagen",
					Content = "Kein Spieler ausgew채hlt!",
					Icon = "error",
					ImageSource = "Material"
				})
				return
			end

			local TargetPlayer = Players:FindFirstChild(selectedName)
			if not TargetPlayer then
				PizzaHub:Notification({
					Title = "Aktion fehlgeschlagen",
					Content = "Spieler '" .. selectedName .. "' nicht gefunden!",
					Icon = "error",
					ImageSource = "Material"
				})
				return
			end

			local function setCameraSubject()
				if TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("Humanoid") then
					camera.CameraSubject = TargetPlayer.Character.Humanoid
					PizzaHub:Notification({
						Title = "View Player",
						Content = "Jetzt wird '" .. selectedName .. "' angesehen",
						Icon = "visibility",
						ImageSource = "Material"
					})
				else
					warn("Charakter oder Humanoid des Spielers nicht gefunden!")
				end
			end

			setCameraSubject()
			viewPlayerConnection = TargetPlayer.CharacterAdded:Connect(setCameraSubject)
		else
			-- Kamera zur체cksetzen auf lokalen Spieler
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
				camera.CameraSubject = LocalPlayer.Character.Humanoid
			end
		end
	end,
}, "ToggleViewPlayer")

local Button = Tab:CreateButton({
	Name = "Throw Player Far Away",
	Description = "Wirft den ausgew채hlten Spieler weit weg",
	Callback = function()
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		local selectedName = getgenv().SelectedPlayer

		if not selectedName or selectedName == "" then
			PizzaHub:Notification({
				Title = "Aktion fehlgeschlagen",
				Content = "Kein Spieler ausgew채hlt!",
				Icon = "error",
				ImageSource = "Material"
			})
			return
		end

		local TargetPlayer = Players:FindFirstChild(selectedName)
		if not TargetPlayer then
			PizzaHub:Notification({
				Title = "Aktion fehlgeschlagen",
				Content = "Spieler '" .. selectedName .. "' nicht gefunden!",
				Icon = "error",
				ImageSource = "Material"
			})
			return
		end

		local car, seat, hoodseat, offset
		local player = TargetPlayer
		local originalCFrame = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.CFrame

		for _, v in ipairs(workspace:GetDescendants()) do
			if v:IsA("VehicleSeat") and v.Occupant == LocalPlayer.Character.Humanoid then
				if v.Parent:FindFirstChild("HoodSeat") then
					car = v.Parent
					seat = v
					hoodseat = v.Parent.HoodSeat
					break
				end
			elseif v:IsA("VehicleSeat") and v.Occupant == nil then
				if v.Parent:FindFirstChild("HoodSeat") then
					car = v.Parent
					seat = v
					hoodseat = v.Parent.HoodSeat
					LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
					break
				end
			end
		end

		repeat task.wait() until seat and seat.Occupant == LocalPlayer.Character.Humanoid

		offset = car:GetPrimaryPartCFrame():ToObjectSpace(hoodseat.CFrame)

		repeat task.wait()
			car:SetPrimaryPartCFrame(player.Character.HumanoidRootPart.CFrame * offset:Inverse())
		until hoodseat.Occupant == player.Character.Humanoid

		local targetPosition = Vector3.new(-4492, 534, -686)

		repeat
			task.wait()
			car:SetPrimaryPartCFrame(CFrame.new(targetPosition) * offset:Inverse())
		until hoodseat.Occupant == nil

		if originalCFrame and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
			LocalPlayer.Character.HumanoidRootPart.CFrame = originalCFrame
		end

		PizzaHub:Notification({
			Title = "Erfolg",
			Content = "Spieler '" .. selectedName .. "' wurde weit weg geworfen!",
			Icon = "check_circle",
			ImageSource = "Material"
		})
	end,
})

tragettab:CreateButton({
    Name = "Kill Player",
    Description = "T철tet den ausgew채hlten Spieler durch Fahrzeug-Throw",
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local selectedName = getgenv().SelectedPlayer

        if not selectedName or selectedName == "" then
            PizzaHub:Notification({
                Title = "Aktion fehlgeschlagen",
                Content = "Kein Spieler ausgew채hlt!",
                Icon = "error",
                ImageSource = "Material"
            })
            return
        end

        local TargetPlayer = Players:FindFirstChild(selectedName)
        if not TargetPlayer then
            PizzaHub:Notification({
                Title = "Aktion fehlgeschlagen",
                Content = "Spieler '" .. selectedName .. "' nicht gefunden!",
                Icon = "error",
                ImageSource = "Material"
            })
            return
        end

        local car, seat, hoodseat, offset
        local player = TargetPlayer
        local originalCFrame = nil

        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            originalCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
        end

        for _, v in ipairs(workspace:GetDescendants()) do
            if v:IsA("VehicleSeat") and v.Occupant == LocalPlayer.Character.Humanoid then
                if v.Parent:FindFirstChild("HoodSeat") then
                    car = v.Parent
                    seat = v
                    hoodseat = v.Parent.HoodSeat
                    break
                end
            elseif v:IsA("VehicleSeat") and v.Occupant == nil then
                if v.Parent:FindFirstChild("HoodSeat") then
                    car = v.Parent
                    seat = v
                    hoodseat = v.Parent.HoodSeat
                    LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
                    break
                end
            end
        end

        repeat task.wait() until seat and seat.Occupant == LocalPlayer.Character.Humanoid

        offset = car:GetPrimaryPartCFrame():ToObjectSpace(hoodseat.CFrame)

        repeat task.wait()
            car:SetPrimaryPartCFrame(player.Character.HumanoidRootPart.CFrame * offset:Inverse())
        until hoodseat.Occupant == player.Character.Humanoid

        local targetPosition = Vector3.new(44, 25, -13) -- Position zum T철ten

        repeat
            task.wait()
            car:SetPrimaryPartCFrame(CFrame.new(targetPosition) * offset:Inverse())
        until hoodseat.Occupant == nil

        if originalCFrame and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = originalCFrame
        end

        PizzaHub:Notification({
            Title = "Erfolg",
            Content = "Spieler '" .. selectedName .. "' wurde get철tet!",
            Icon = "check_circle",
            ImageSource = "Material"
        })
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Spam Snowballs",
    CurrentValue = false,
    Flag = "ToggleSpamSnowballs",
    Callback = function(Enabled)
        getgenv().SnowballThrowingEnabled = Enabled

        if Enabled then
            PizzaHub:Notification({
                Title = "Spam Snowballs",
                Content = "Snowball Spam aktiviert!",
                Icon = "check_circle",
                ImageSource = "Material"
            })

            local Players = game:GetService("Players")
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local LocalPlayer = Players.LocalPlayer
            local Utility = require(ReplicatedStorage:WaitForChild("Library")):Load("Utility")

            local function getTargetPosition()
                local targetName = getgenv().SelectedPlayer
                local targetPlayer = Players:FindFirstChild(targetName or "")
                if targetPlayer and targetPlayer.Character then
                    local torso = targetPlayer.Character:FindFirstChild("UpperTorso") or targetPlayer.Character:FindFirstChild("Torso")
                    if torso then
                        return torso.Position
                    end
                end
                return Vector3.new(0, 50, 0)
            end

            -- Override Utility.SendData to block RemoveGear action
            local oldSendData = Utility.SendData
            Utility.SendData = function(_, action, ...)
                if action == "RemoveGear" then return end
                return oldSendData(_, action, ...)
            end

            getgenv().SnowballThread = task.spawn(function()
                while getgenv().SnowballThrowingEnabled do
                    local backpack = LocalPlayer:FindFirstChild("Backpack")
                    local character = LocalPlayer.Character
                    if not backpack or not character then
                        task.wait()
                        continue
                    end

                    -- Entferne alle vorhandenen Snowballs im Backpack und Charakter
                    for _, tool in ipairs(backpack:GetChildren()) do
                        if tool:IsA("Tool") and tool.Name == "Snowball" then
                            tool:Destroy()
                        end
                    end
                    for _, tool in ipairs(character:GetChildren()) do
                        if tool:IsA("Tool") and tool.Name == "Snowball" then
                            tool:Destroy()
                        end
                    end

                    -- Gib dem Spieler 7 Snowballs
                    for i = 1, 7 do
                        ReplicatedStorage.PlayerChannel:FireServer("GiveItem", 19328185)
                        task.wait(0.1)
                    end

                    repeat task.wait() until #(backpack:GetChildren()) >= 7

                    -- Ziehe die Snowballs ins Charakterinventar und wirf sie auf Ziel
                    for _, tool in ipairs(backpack:GetChildren()) do
                        if tool:IsA("Tool") and tool.Name == "Snowball" then
                            tool.Parent = character
                            task.wait(0.1)
                            local clickEvent = tool:FindFirstChild("Clicked")
                            if clickEvent then
                                clickEvent:FireServer(getTargetPosition())
                            end
                            task.wait(0.1)
                        end
                    end

                    task.wait(0.5)
                end
            end)
        else
            getgenv().SnowballThrowingEnabled = false
            PizzaHub:Notification({
                Title = "Spam Snowballs",
                Content = "Snowball Spam deaktiviert!",
                Icon = "info",
                ImageSource = "Material"
            })
        end
    end,
})




local Teleports = Window:CreateTab({
    Name = "Teleports",
    Icon = "code",
    ImageSource = "Material",
    ShowTitle = true
})


-- Bereichsteleport Dropdown
Teleports:CreateDropdown({
    Name = "Teleport to area",
    Description = nil,
    Options = { "None", "Spawn", "Manager", "Cashier", "Cook", "Boxer", "Delivery", "Supplier" },
    CurrentOption = { "None" },
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(option)
        if type(option) == "table" then option = option[1] end
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        if not hrp then return end

        local locations = {
            Spawn = Vector3.new(49, 3, 198),
            Manager = Vector3.new(37, 4, 3),
            Cashier = Vector3.new(48, 4, 80),
            Cook = Vector3.new(42, 4, 61),
            Boxer = Vector3.new(55, 4, 31),
            Delivery = Vector3.new(64, 4, -17),
            Supplier = Vector3.new(8, 13, -1020)
        }

        if locations[option] then
            hrp.CFrame = CFrame.new(locations[option])
        end
    end
}, "TeleportArea")


-- Haus-Teleport Dropdown
Teleports:CreateDropdown({
    Name = "Teleport to house",
    Description = nil,
    Options = { "None", "Home", "A1", "A2", "A3", "B1", "B2", "B3", "B4", "B5", "B6", "C1", "C2", "C3" },
    CurrentOption = { "None" },
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(option)
        if type(option) == "table" then option = option[1] end
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
        if not hrp then return end

        local coords = {
            A1 = Vector3.new(190, 3, -474),
            A2 = Vector3.new(188, 3, -652),
            A3 = Vector3.new(187, 3, -823),
            B1 = Vector3.new(-21, 3, -432),
            B2 = Vector3.new(24, 3, -481),
            B3 = Vector3.new(-20, 3, -612),
            B4 = Vector3.new(24, 3, -663),
            B5 = Vector3.new(-20, 3, -800),
            B6 = Vector3.new(23, 3, -836),
            C1 = Vector3.new(-184, 3, -444),
            C2 = Vector3.new(-186, 3, -612),
            C3 = Vector3.new(-185, 3, -792)
        }

        if option == "Home" then
            game:GetService("ReplicatedStorage").PlayerChannel:FireServer("TeleportHome")
        elseif coords[option] then
            hrp.CFrame = CFrame.new(coords[option])
        end
    end
}, "TeleportHouse")


-- Insel-Teleport Dropdown
local player = game.Players.LocalPlayer

local islandOptions = { "None", "Pirate Island", "Stone Island", "Sand Island", "Teleport to Party Island" }
local islandModelName = {
    ["Pirate Island"] = "Island",
    ["Stone Island"] = "Island1",
    ["Sand Island"] = "Island2"
}

Teleports:CreateDropdown({
    Name = "Teleport to island",
    Description = nil,
    Options = islandOptions,
    CurrentOption = { "None" },
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(option)
        if type(option) == "table" then option = option[1] end
        if islandModelName[option] then
            local model = workspace:FindFirstChild(islandModelName[option])
            if model and model:IsA("Model") then
                local targetCFrame = model:GetPivot() + Vector3.new(0, 20, 0)
                _G.teleportTo(targetCFrame)
            end
        elseif option == "Teleport to Party Island" then
            _G.teleportTo(Vector3.new(88, 1, -315))
        end
    end
}, "TeleportIslands")





local Scripts = Window:CreateTab({
    Name = "Scripts",
    Icon = "code",
    ImageSource = "Material",
    ShowTitle = true
})


Scripts:CreateLabel({
	Text = "Warning, use this Farm whit alt account, this is ban risk on main account",
	Style = 3
})

Scripts:CreateButton({
	Name = "Auto Farm",
	Description = nil,
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/K0RoS3nPa1/Lua/refs/heads/main/lua2"))()
	end
})

Scripts:CreateButton({
    Name = "Pizza hub 2.0",
    Description = "by AFP",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/ImARandom44/AFP/refs/heads/main/Source"))()
    end
})

Scripts:CreateButton({
    Name = "Hussien",
    Description = nil,
    Callback = function()
        loadstring(game:HttpGet(('https://raw.githubusercontent.com/Hm5011/hussain/refs/heads/main/Work%20at%20a%20pizza%20place'),true))()
    end
})

Scripts:CreateButton({
    Name = "invinite yield",
    Description = nil,
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()

    end
})


local Theme = Window:CreateTab({
	Name = "Theme",
	Icon = "palette",
	ImageSource = "Material",
	ShowTitle = true
})
Theme:BuildThemeSection()

local Settings = Window:CreateTab({
	Name = "Settings",
	Icon = "settings",
	ImageSource = "Material",
	ShowTitle = true
})

Settings:BuildConfigSection()



